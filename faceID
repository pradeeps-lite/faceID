import cv2
import numpy as np
import face_recognition
import os
from skimage import feature

# Directory to store known faces
KNOWN_FACES_DIR = "known_faces"
if not os.path.exists(KNOWN_FACES_DIR):
    os.makedirs(KNOWN_FACES_DIR)

# Load Haar Cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Function to load known faces
def load_known_faces():
    known_encodings = []
    known_names = []

    for name in os.listdir(KNOWN_FACES_DIR):
        person_dir = os.path.join(KNOWN_FACES_DIR, name)
        if os.path.isdir(person_dir):
            for filename in os.listdir(person_dir):
                image_path = os.path.join(person_dir, filename)
                image = face_recognition.load_image_file(image_path)
                encoding = face_recognition.face_encodings(image)
                if encoding:
                    known_encodings.append(encoding[0])
                    known_names.append(name)
    return known_encodings, known_names

# Function to save new face data
def save_face_data(frame, name):
    person_dir = os.path.join(KNOWN_FACES_DIR, name)
    if not os.path.exists(person_dir):
        os.makedirs(person_dir)
    count = len(os.listdir(person_dir))
    cv2.imwrite(f"{person_dir}/{name}_{count + 1}.jpg", frame)
    print(f"Saved face data for {name}.")

# Function to detect AI-generated faces
def detect_ai_generated_face(gray_face):
    lbp = feature.local_binary_pattern(gray_face, P=24, R=3, method="uniform")
    hist, _ = np.histogram(lbp.ravel(), bins=np.arange(0, 27), range=(0, 26))
    hist = hist.astype("float")
    hist /= (hist.sum() + 1e-7)

    # Simple heuristic: high uniform patterns indicate smooth textures common in AI faces
    if hist[0] > 0.5:
        return True
    return False

# Load known faces
known_encodings, known_names = load_known_faces()

# Initialize webcam
cap = cv2.VideoCapture(0)

# Function to draw rounded rectangle
def draw_rounded_rectangle(img, pt1, pt2, color, thickness, radius=10):
    x1, y1 = pt1
    x2, y2 = pt2
    overlay = img.copy()
    cv2.rectangle(overlay, (x1, y1), (x2, y2), color, -1)
    return cv2.addWeighted(overlay, 0.3, img, 0.7, 0)

while True:
    ret, frame = cap.read()
    small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
    rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)
    gray_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2GRAY)

    # Detect faces
    face_locations = face_recognition.face_locations(rgb_small_frame)
    face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

    # Add status bar
    status_text = "Detecting Faces..." if face_locations else "No Faces Detected"
    cv2.putText(frame, status_text, (10, 30), cv2.FONT_HERSHEY_DUPLEX, 1, (255, 255, 255), 2)

    for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
        matches = face_recognition.compare_faces(known_encodings, face_encoding)
        name = "Unknown"

        # Identify the face if a match is found
        if True in matches:
            first_match_index = matches.index(True)
            name = known_names[first_match_index]

        # AI-generated face detection
        face_roi = gray_frame[top:bottom, left:right]
        is_ai_face = detect_ai_generated_face(face_roi)

        # Scale back up face locations
        top *= 4
        right *= 4
        bottom *= 4
        left *= 4

        # Draw modern rectangle and label
        color = (0, 255, 0) if not is_ai_face else (0, 0, 255)
        label = f"{name} - {'AI Face' if is_ai_face else 'Real Face'}"

        # Draw rounded rectangle with transparency
        frame = draw_rounded_rectangle(frame, (left, top), (right, bottom), color, 2)
        cv2.putText(frame, label, (left, top - 10), cv2.FONT_HERSHEY_DUPLEX, 0.9, color, 2)

    cv2.imshow('Facial Identification System', frame)

    key = cv2.waitKey(1)
    if key == ord('q'):
        break
    elif key == ord('s'):
        # Save face data with a name
        name = input("Enter name for the new face: ")
        save_face_data(frame, name)
        known_encodings, known_names = load_known_faces()  # Reload known faces

# Release webcam
cap.release()
cv2.destroyAllWindows()
